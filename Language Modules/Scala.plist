{
    BBEditDocumentType = "CodelessLanguageModule";
    BBLMLanguageDisplayName = "Scala";
    BBLMLanguageCode = scla;
    BBLMColorsSyntax = YES;
    BBLMScansFunctions = YES;
    BBLMIsCaseSensitive = YES;
    
    BBLMKeywordList = (
		abstract,
		case,
		catch,
		class,
		def,
		do,
		else,
		extends,
		false,
		final,
		finally,
		for,
		forSome,
		if,
		implicit,
		import,
		lazy,
		match,
		new,
		null,
		object,
		override,
		package,
		private,
		protected,
		return,
		sealed,
		super,
		this,
		throw,
		trait,
		true,
		try,
		type,
		val,
		var,
		while,
		with,
		yield,
		_
    );
    BBLMPredefinedNameList = (
        Any,
        AnyRef,
        AnyVal,
        App,
        Application,
        Array,
        Boolean,
        Byte,
        Cell,
        Char,
        cloneable,
        Console,
        CountedIterator,
        DelayedInit,
        deprecated,
        deprecatedName,
        Double,
        Dynamic,
        Either,
        Enumeration,
        Equals,
        Equiv,
        FallbackArrayBuilding,
        Float,
        Function,
        Function1,
        Function2,
        Function3,
        Function4,
        Function5,
        Function6,
        Function7,
        Function8,
        Function9,
        Function10,
        Immutable,
		inline,
        Int,
        Left,
        Long,
        LowPriorityImplicits,
        MatchError,
        Math,
        Mutable,
        native,
        noinline,
        None,
        NotDefinedError,
        Nothing,
        NotNull,
        Null,
        Option,
        PartialFunction,
        Predef,
        Product,
        Product1,
        Product2,
        Proxy,
        remote,
        Responder,
        Right,
        Serializable,
        SerialVersionUID,
        Short,
        Some,
        specialized,
        String,
        Symbol,
        throws,
        transient,
        Tuple1,
        Tuple2,
        Tuple3,
        Tuple4,
        Tuple5,
        Tuple6,
        Tuple7,
        Tuple8,
        Tuple9,
        Tuple10,
        Unit,
        actors,
    	annotation,
    	collection,
    	concurrent,
    	io,
    	math,
    	parallel,
    	ref,
    	reflect,
    	runtime,
    	swing,
    	sys,
    	testing,
    	text,
    	util,
    	
    	BigDecimal,
    	BigInt,
    	Numeric,
    	Ordering,
    	Vector,
    	unchecked,
    	volatile,
    	
    	ArrowAssoc,
    	DummyImplicit,
    	Ensuring,
    	List,
    	Manifest,
    	Map,
    	NoManifest,
    	OptManifest,
    	Pair,
    	Set,
    	Triple,
    	print,
    	printf,
    	println,
    	require,
    	assert,
    	assume,
    	classOf,
    	classManifest,
    	identity,
    	implicitly,
    	locally,
    	manifest,
    	optManifest,
    	Character,
    	ClassLoader,
    	Compiler,
    	Enum,
    	InheritableThreadLocal,
    	Integer,
    	Object,
    	Package,
    	Process,
    	ProcessBuilder,
    	Runtime,
    	RuntimePermission,
    	SecurityManager,
    	StackTraceElement,
    	StrictMath,
    	StringBuffer,
    	StringBuilder,
    	System,
    	Thread,
    	ThreadGroup,
    	ThreadLocal,
    	Throwable,
    	Void,
    	ArithmeticException,
    	ArrayIndexOutOfBoundsException,
    	ArrayStoreException,
    	ClassCastException,
    	ClassNotFoundException,
    	CloneNotSupportedException,
    	EnumConstantNotPresentException,
    	Exception,
    	IllegalAccessException,
    	IllegalArgumentException,
    	IllegalMonitorStateException,
    	IllegalStateException,
    	IndexOutOfBoundsException,
    	InstantiationException,
    	InterruptedException,
    	NegativeArraySizeException,
    	NoSuchFieldException,
    	NoSuchMethodException,
    	NullPointerException,
    	NumberFormatException,
    	RuntimeException,
    	SecurityException,
    	StringIndexOutOfBoundsException,
    	TypeNotPresentException,
    	UnsupportedOperationException,
    	AbstractMethodError,
    	AssertionError,
    	ClassCircularityError,
    	ClassFormatError,
    	Error,
    	ExceptionInInitializerError,
    	IllegalAccessError,
    	IncompatibleClassChangeError,
    	InstantiationError,
    	InternalError,
    	LinkageError,
    	NoClassDefFoundError,
    	NoSuchFieldError,
    	OutOfMemoryError,
    	StackOverflowError,
    	ThreadDeath,
    	UnknownError,
    	UnsatisfiedLinkError,
    	UnsupportedClassVersionError,
    	VerifyError,
    	VirtualMachineError,
    	Deprecated,
    	Override
    );
    BBLMSuffixMap = (
        {
            BBLMLanguageSuffix = ".scala";
        },
    );
    BBLMIsSourceKind = YES;
    BBLMIsHeaderKind = NO;
    "Language Features" = {
        "Close Block Comments" = "*/";
        "Close Parameter Lists" = ")";
        "Close Statement Blocks" = "}";
        "Close Strings 1" = "'";
        "Close Strings 2" = "\"";
        "End-of-line Ends Strings 1" = YES;
        "End-of-line Ends Strings 2" = YES;
        "Escape Char in Strings 1" = "\\";
        "Escape Char in Strings 2" = "\\";
        "Identifier and Keyword Characters" = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";
        "Open Block Comments" = "/*";
        "Open Line Comments" = "//";
        "Open Parameter Lists" = "(";
        "Open Statement Blocks" = "{";
        "Open Strings 1" = "'";
        "Open Strings 2" = "\"";
        "Prefix for Functions" = "def";
        "Prefix for Procedures" = "def";
        "Terminator for Prototypes 1" = ";";
        "Terminator for Prototypes 2" = "";
    };
}